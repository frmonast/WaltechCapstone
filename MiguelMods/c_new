#include <stdint.h>\n"
#include <stdlib.h>\n"
#include <string.h>\n"
#include <avr/io.h>\n"
#include <avr/interrupt.h>\n"
#include "uart.c"\n"
#include <util/delay.h>\n"
\n"
volatile uint8_t timerOF=0;\n"
#define OVERSAMPLES 10\n"
unsigned long int TimerSetup = 0;\n"
static volatile uint16_t adcData;\n"
static volatile uint16_t ADCtotal;\n"
static volatile uint8_t adcDataL;\n"
static volatile uint8_t adcDataH;\n"
static volatile uint8_t sample_count;\n"
\n"
inline ISR(TIMER0_OVF_vect)\n"
{\n"
    timerOF=1;\n"
    \n"
    TimerSetup = TimerSetup + 1;\n"
    \n"
    if(TimerSetup > (61035/4))  //sets speed to a quarter of a second\n"
    {    \n"
        if(uart_buffer_empty())\n"
        {   \n"
			char portStates[20]="";\n"
            \n"
            //Inputs:\n"
            if((PINC & (1 << PINC4)) > 0)\n"
            {\n"
                strcat(portStates,"1");\n"
            }else if((PINC & (1 << PINC4)) == 0){\n"
                strcat(portStates,"0");\n"
            }\n"
            \n"
			if((PINC & (1 << PINC5)) > 0)\n"
            {\n"
                strcat(portStates,"1");\n"
            }else if((PINC & (1 << PINC5)) == 0){\n"
                strcat(portStates,"0");\n"
            }\n"
            \n"
			if((PIND & (1 << PIND2)) > 0)\n"
            {\n"
                strcat(portStates,"1");\n"
            }else if((PIND & (1 << PIND2)) == 0){\n"
                strcat(portStates,"0");\n"
            }\n"
            \n"
			if((PIND & (1 << PIND3)) > 0)\n"
            {\n"
                strcat(portStates,"1");\n"
            }else if((PIND & (1 << PIND3)) == 0){\n"
                strcat(portStates,"0");\n"
            }\n"
            \n"
			if((PIND & (1 << PIND4)) > 0)\n"
            {\n"
                strcat(portStates,"1");\n"
            }else if((PIND & (1 << PIND4)) == 0){\n"
                strcat(portStates,"0");\n"
            }\n"
                \n"
            //Outputs:\n"
            if((PIND & (1 << PIND5)) > 0)\n"
            {\n"
                strcat(portStates,"1");\n"
            }else if((PIND & (1 << PIND5)) == 0){\n"
                strcat(portStates,"0");\n"
            }\n"
            \n"
            if((PIND & (1 << PIND6)) > 0)\n"
            {\n"
                strcat(portStates,"1");\n"
            }else if((PIND & (1 << PIND6)) == 0){\n"
                strcat(portStates,"0");\n"
            }\n"
            \n"
            if((PIND & (1 << PIND7)) > 0)\n"
            {\n"
                strcat(portStates,"1");\n"
            }else if((PIND & (1 << PIND7)) == 0){\n"
                strcat(portStates,"0");\n"
            }\n"
            \n"
            if((PINB & (1 << PINB0)) > 0)\n"
            {\n"
                strcat(portStates,"1");\n"
            }else if((PINB & (1 << PINB0)) == 0)\n"
            {\n"
                strcat(portStates,"0");\n"
            }\n"
            \n"
            if((PINB & (1 << PINB3)) > 0)\n"
            {\n"
                strcat(portStates,"1");\n"
            }else if((PINB & (1 << PINB3)) == 0){\n"
                strcat(portStates,"0");\n"
            }\n"
            \n"
            if((PINB & (1 << PINB4)) > 0)\n"
            {\n"
                strcat(portStates,"1");\n"
            }else if((PINB & (1 << PINB4)) == 0){\n"
                strcat(portStates,"0");\n"
            }\n"
            \n"
            if((PINB & (1 << PINB5)) > 0)\n"
            {\n"
                strcat(portStates,"1");\n"
            }else if((PINB & (1 << PINB5)) == 0){\n"
                strcat(portStates,"0");\n"
            }\n"
            \n"
            strcat(portStates,"\n\0");\n"
            \n"
			uart_getc();\n"
			\n"
            uart_puts(portStates);\n"
        }\n"
        TimerSetup = 0;\n"
    }\n"
    \n"
}\n"
\n"
inline ISR(ADC_vect)\n"
{\n"
    adcDataL = ADCL;\n"
    adcDataH = ADCH;\n"
    adcData = 0;\n"
    adcData = adcData | adcDataH;\n"
    adcData = adcData << 8;\n"
    adcData = adcData | adcDataL;\n"
    ADCtotal = ADCtotal+adcData;\n"
    sample_count ++;\n"
}\n"
int16_t do_math(int16_t A,int16_t B,char operator)\n"
{\n"
    int32_t result = 0;\n"
    if (operator == '+'){result = A+B;}\n"
    if (operator == '-'){result = A-B;}\n"
    if (operator == '*'){result = A*B;}\n"
    if (operator == '/'){result = A/B;}\n"
//    if (operator == '='){result = A = B;}\n"
    int16_t i =  ((result >> 0) & 0xffff);\n"
   return i;\n"
}\n"
uint16_t read_adc(uint8_t channel)\n"
{\n"
    ADMUX = channel;// set channel\n"
    ADMUX |=  (1<<REFS0);// sets ref volts to Vcc\n"
    ADCSRA |= (1<<ADEN); // enable the ADC\n"
    sample_count = 0; ADCtotal = 0;//clear sample count\n"
    ADCSRA |= (1<<ADSC);//start conversion\n"
    //read adcData done in interrupt\n"
    while (sample_count < OVERSAMPLES){asm volatile ("nop"::);}//wait for completion\n"
    ADCSRA &=~ (1<<ADEN); // stop the ADC\n"
    return (ADCtotal/OVERSAMPLES); //mx osamples = 63  othewise will overflow total register with 10 bit adc results\n"
}\n"
int main()\n"
{\n"
//set up ADC\n"
    ADCSRA |= ( (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0) );//  sets adc clock prescaler to 128 //checked\n"
    ADCSRA |= (1<<ADIE); // enable ADC conversion complete interrupt\n"
    ADCSRA |= (1<<ADATE);// set to auto trigger (free running by default)\n"
   DDRD |= (1<<5);\n"
   DDRD |= (1<<6);\n"
   DDRD |= (1<<7);\n"
   DDRB |= (1<<0);\n"
   DDRB |= (1<<3);\n"
   DDRB |= (1<<4);\n"
   DDRB |= (1<<5);\n"
\n"
   //DDRC &= 0b0000000;\n"
   PORTC |= (1<<4);\n"
   PORTC |= (1<<5);\n"
   PORTD |= (1<<2);\n"
   PORTD |= (1<<3);\n"
   PORTD |= (1<<4);\n"
\n"
   //PCICR &= 0b000;\n"
   //PCICR |= 0b010;\n"
   //\n"
   //PCMSK1 &= 0b00000000; \n"
   //PCMSK1 |= 0b00111111; \n"
   \n"
    //set up loop timer:\n"
    /*TIMSK0 |= (1<<TOIE0);// overflow capture enable\n"
    TCNT0 = 101;// start at this\n"
    TCCR0B &= ((1<<CS10)|(1<<CS12));// timer started with /1024 prescaler\n"
    sei();*/\n"
    \n"
    //OCR0A = 0xAF;\n"
    //TIMSK0 |= _BV(OCIE0A);\n"
    \n"
    //set up loop timer:\n"
\n"
    TIMSK0 |= (1<<TOIE0);// overflow capture enable*/\n"
    TCNT0 = 101;// start at this\n"
    TCCR0B |= (1<<CS10);//((1<<CS10)|(1<<CS12));// timer started with /1024 prescaler\n"
    sei();\n"
    //uint8_t cont_Name_2_NO = 0;\n"
\n"
    //uint8_t output_Name_1 = 0;\n"
\n"
\n"
\n"
\n"
\n"
    //uint8_t W = 1;\n"
	uart_init();\n"
\n"
    uint8_t cont_Name_5_NC = 1;\n"
    uint8_t output_Name_2 = 0;\n"
    uint8_t cont_Name_6_NC = 1;\n"
    uint8_t output_Name_4 = 0;\n"
    \n"
    uint8_t W = 1;\n"
\n"
    while (1)\n"
    {\n"
\n"
        if (timerOF == 1)\n"
        {\n"
           timerOF=0;//reset timer flag\n"
           TCNT0 = 101;// start at this\n"
           //inputs:\n"
           cont_Name_5_NC = PINC &(1<<4);\n"
           cont_Name_6_NC = PINC &(1<<5);\n"
\n"
            //Start of Ladder:\n"
            //rung at 0\n"
             W = 1;\n"
             if(cont_Name_5_NC == 0){W = 0;}\n"
              output_Name_2 = W;\n"
            //end rung\n"
\n"
            //rung at 1\n"
             W = 1;\n"
             if(cont_Name_6_NC == 0){W = 0;}\n"
              output_Name_4 = W;\n"
            //end rung\n"
\n"
           //outputs:\n"
         if(output_Name_2 == 0){PORTD &=~ (1<<5);}\n"
         else {PORTD |= (1<<5);}\n"
         if(output_Name_4 == 0){PORTD &=~ (1<<6);}\n"
         else {PORTD |= (1<<6);}\n"
\n"
       }\n"
\n"
\n"
        /*if (timerOF == 1)\n"
        {\n"
           timerOF=0;//reset timer flag\n"
           TCNT0 = 101;// start at this\n"
           //inputs:\n"
           cont_Name_2_NO = PINC &(1<<4);\n"
\n"
            //Start of Ladder:\n"
\n"
            //rung at 0\n"
             W = 1;\n"
             if(cont_Name_2_NO == 0){\n"
				W = 0;\n"
\n"
			 }else{\n"
					uart_puts("Hello ALL");			 \n"
			 }\n"
			 \n"
              output_Name_1 = W;\n"
\n"
\n"
            //end rung\n"
\n"
           //outputs:\n"
         if(output_Name_1 == 0){PORTD &=~ (1<<5);}\n"
         else {PORTD |= (1<<5);}\n"
\n"
       }*/\n"
   }\n"
}\n"
